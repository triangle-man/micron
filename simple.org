#+title: The simplest progamming language ever
#+startup: showall
#+options: toc:nil
#+latex_header: \usepackage{ebproof}
#+latex_header: \usepackage{booktabs}
#+latex_header: \newcommand{\eqln}{\asymp}
#+latex_header: \usepackage{ebproof}

#+latex_header: \newcommand{\id}{\text{\tt id}}
#+latex_header: \newcommand{\unit}{\text{\tt unit}}
#+latex_header: \newcommand{\fail}{\text{\tt fail}}
#+latex_header: \newcommand{\fst}{\text{\tt fst}}
#+latex_header: \newcommand{\snd}{\text{\tt snd}}
#+latex_header: \newcommand{\inl}{\text{\tt inl}}
#+latex_header: \newcommand{\inr}{\text{\tt inr}}
#+latex_header: \DeclareMathOperator{\src}{source}
#+latex_header: \DeclareMathOperator{\trg}{target}
#+latex_header: \DeclareMathOperator{\typ}{type}
#+latex_header: \newcommand{\termstep}{\rightsquigarrow}
#+latex_header: \newcommand{\step}{\rightarrowtail}
#+latex_header: \newcommand{\steps}{\twoheadrightarrow}
#+latex_header: \newcommand{\height}[1]{\left\lceil#1\right\rceil}

* Formalism

Here is what you might call a “programming language,” if you were being
charitable.

** Syntax

Fix, once and for all, a countable collection of /atomic types/, $A, B, C,
\dotsc$. A /type/ is either an atomic type, or $\top$, or $\bot$, or $P\times
Q$, or $P+Q$, where $P$ and $Q$ are types. (In code, we write ~P * Q~ for
$P\times Q$.) An /arrow type/ is a pair of types, which we write separated by an
arrow, such as $P\to Q$. Note that an arrow type is not a type! 

A program is “a thing with an arrow type.” The syntax of programs is defined
by terms and expressions. A /term/ is one of the following:
\begin{equation*}
\begin{split}
  t \equiv &\hphantom{\mid} \id : P \to P \\
  &\mid \fst : P \times Q \to P \\
  &\mid \snd : P \times Q \to Q \\
  &\mid\inl : P \to P + Q \\
  &\mid\inr : Q \to P + Q \\
  &\mid\unit : P \to \top \\
  &\mid\fail : \bot \to P.
\end{split}
\end{equation*}
An expression is either a term or a construction from other expressions. When
constructing expressions, it is necessary to follow certain rules regarding the
arrow types of the subexpressions and the arrow type of the constructed
expression. Specifically, an /expression/ is:

\begin{equation*}
\begin{split}
  e \equiv &\;t \\
  &\mid
  {\begin{prooftree}
    \hypo{e_2 : Q \to R}
    \hypo{e_1 : P \to Q}
    \infer2{e_2 \circ e_1 : P \to R}
  \end{prooftree}}\qquad\text{(composition)} \\
  &\mid
  {\begin{prooftree}
    \hypo{e_1 : P \to Q}
    \hypo{e_2 : P \to R}
    \infer2{\langle e_1, e_2\rangle : P \to Q \times R}
  \end{prooftree}}\qquad\text{(product)} \\
  &\mid            
  {\begin{prooftree}
    \hypo{e_1 : Q \to P}
    \hypo{e_2 : R \to P}
    \infer2{\left\{ e_1; e_2 \right\} : Q + R \to P}
  \end{prooftree}}\qquad\text{(coproduct)}.
\end{split}
\end{equation*}

These constructions are basically typing judgments without the turnstile
($\vdash$). There is no turnstile because there is no implication/lambdas, so
nothing to be on the left of the turnstile.

** One-step reduction relation

The relation $\termstep$ is between /expressions;/ that is, between trees
showing how to construct the expression. However, it's easier to write down just
the “root” of each tree—the expression /without/ all the arrow types, noting
that once the types on the “more complex” side are known then the types on the
“simpler” side follow.

In the following, $e$, $f$, and $g$ are arbitrary expressions. 

\begin{equation}\tag{$\termstep$id}\
  \begin{split}
    e \circ \id &\termstep e \\ 
    \id \circ e &\termstep e
  \end{split}
\end{equation}

\begin{equation}\tag{$\termstep$assoc}\label{redn:assoc}
e \circ (f \circ g) \termstep (e \circ f) \circ g
\end{equation}

\begin{equation}\tag{$\termstep$pair}\label{redn:pair}
\begin{split}
  \fst \circ \left\langle e, f\right\rangle &\termstep e \\
  \snd \circ \left\langle e, f\right\rangle &\termstep f \\
  \left\langle\fst \circ e, \snd \circ e \right\rangle &\termstep e \\
  \left\langle\fst, \snd\right\rangle &\termstep \id     
\end{split}
\end{equation}

\begin{equation}\tag{$\termstep$and}\label{redn:and}
    \left\langle e, f \right\rangle \circ g \termstep \left\langle e\circ g, f\circ g \right\rangle 
\end{equation}

\begin{equation}\tag{$\termstep$sum}
\begin{split}
  \left\{ e; f\right\} \circ \inl &\termstep e \\
  \left\{ e; f\right\} \circ \inr &\termstep f \\
  \left\{e \circ \inl; e \circ \inr \right\} &\termstep e \\
  \left\{\inl; \inr\right\} &\termstep \id     
\end{split}
\end{equation}

\begin{equation}\tag{$\termstep$case}\label{redn:case}
    e\circ \left\{f; g \right\} \termstep \left\{ e\circ f; e\circ g \right\} 
\end{equation}

\begin{equation}\tag{$\termstep$distr}\label{redn:distr}
  \left\langle e, f\right\rangle \circ \left\{g; h \right\} \termstep
  \bigl\langle e \circ \left\{ g; h \right\}, f \circ \left\{ g; h \right\} \bigr\rangle 
\end{equation}         

\begin{equation}\tag{$\termstep$unit}
\begin{split}
  \unit \circ e &\termstep \unit \\
  \left\langle \fst, \unit \right\rangle &\termstep \id \\
  \left\langle \unit, \snd \right\rangle &\termstep \id.
\end{split}
\end{equation}

\begin{equation}\tag{$\termstep$fail}
\begin{split}
  e \circ \fail &\termstep \fail \\
  \left\{ \inl; \fail \right\} &\termstep \id \\
  \left\{ \fail; \inr \right\} &\termstep \id
\end{split}
\end{equation}

I believe it to be true, but cannot prove, that the compatible closure of
$\termstep$ is strongly normalising and Church-Rosser. Church-Rosser would
follow straighforwardly from strong normalisation and weak confluence (which
looks reasonably clear).

The reduction relation $\termstep$ is more complicated than the equivalence
relation from which it is derived. For example, the last two reductions of
\ref{redn:pair} would not be required. I believe I can construct, on the set of
all expressions of the same arrow type, a partial order, such that the “correct
direction” of the reduction at any step is towards smaller expressions (smaller
in the partial order).[fn:2] However, although I believe it to be true, I cannot show
that this partial order is strict and well-founded. If I could show these
things, strong normalisation would follow.

The normal form of an expression is presumably products, of coproducts, of
compositions of atomic terms. Normal forms do not contain compositions of products
or coproducts: I believe this is what logicians called “cut elimination” or
/Hauptsatz/. 

We clearly obtain a category. I believe we obtain the /free category with finite
products and coproducts/ on the set $\{A, B, \dotsc\}$.

** Values

There are no values as yet. A “value of type $X$” /would/ be an expression with
arrow type $\top\to X$. Were we to have a value $v : \top\to X$ and an
expression $p : X\to Y$ we would of course obtain an expression $p\circ v :
\top\to Y$, which is a value of type $Y$.

Since this language is the free category, we may “add in values” but continue
computing with expressions as described.

** Example programs

*** Swap

A program that “swaps the values of a pair $X\times X$” (if there were values) is:
\begin{equation*}
\text{\tt swap} = \left\langle \snd, \fst \right\rangle : X\times X \to X\times X.
\end{equation*}

Note that, as expected,
\begin{equation*}
\begin{split}
  \text{\tt swap} \circ \text{\tt swap}
  &= \left\langle \snd, \fst \right\rangle \circ \left\langle \snd, \fst \right\rangle \\
  &\termstep \left\langle \snd \circ \left\langle \snd, \fst \right\rangle,
  \fst \circ \left\langle \snd, \fst \right\rangle \right\rangle \\
  &\termstep \left\langle \fst, \snd \right\rangle \\
  &\termstep \id.
  \end{split}
\end{equation*}

*** If

Perhaps one would like a program that, “reads the first element of a pair; if it
is one thing, the program does something to the second element; if it is another
thing, the program does a different thing to the second element.” I believe one
cannot write such a program using the language as described.

Here is a program of arrow type $A\times X + B\times X\to (A+B)\times X$:
\begin{equation*}
\footnotesize
\begin{prooftree}
 \hypo{\inl \circ \fst : A \times X \to A + B}
 \hypo{\inr \circ \fst : B \times X \to A + B}
 \infer2{\left\{ \inl \circ \fst, \inr \circ \fst \right\} : A \times X + B \times X \to A + B}
 \hypo{\snd : A \times X \to X}
 \hypo{\snd : B \times X \to X}
 \infer2{\left\{ \snd, \snd \right\} : A \times X + B \times X \to X}
 \infer2{\bigl\langle \left\{ \inl \circ \fst, \inr \circ \fst \right\},
   \left\{ \snd, \snd \right\} \bigr\rangle : A \times X + B \times X \to (A + B) \times X}
\end{prooftree}
\end{equation*}
Note that it is in normal form. 

I believe that there is /no/ expression of type $(A+B)\times X \to A\times X +
B\times X$. Roughly speaking, valid expressions can only reduce the number of
pairs, and increase the number of sums. Even more roughly, the language as
written can't curry products.





* COMMENT Discussion

It almost looks like we have a category. The definition would go something like this: let the objects
be types, and let the morphisms be expressions. A morphism $e:P\to Q$ is just an expression whose
arrow type is $P\to Q$. To compose morphisms, use the rule of composition.

However, we do not, thereby, obtain a category. One must check the category
axioms and these in general do not hold. For example, the only reasonable
candidate for an identity morphism is $\id$ but the expression $\id:A\to A$
is patently not the same expression as $(\id:A\to A)\circ(\id:A\to A)$.

A separate problem is that composition (of expressions) is not
associative. Consider the following expression (written in tree notation):
\begin{equation*}\footnotesize
  \begin{prooftree}
    \hypo{\snd : A \times B \to B}
    \hypo{\fst : (A \times B) \times C \to A \times B}
    \hypo{\fst : ((A \times B) \times C) \times D \to (A \times B) \times C}
    \infer2{\fst\circ\fst : ((A \times B) \times C) \times D \to A \times B}
    \infer2{\snd \circ (\fst\circ\fst) : ((A \times B) \times C) \times D \to B}
    \end{prooftree}.   
\end{equation*}
And here is another way of constructing the same expression:
\begin{equation*}\footnotesize
  \begin{prooftree}
    \hypo{\snd : A \times B \to B}
    \hypo{\fst : (A \times B) \times C \to A \times B}
    \infer2{\snd\circ\fst : (A \times B) \times C \to B}
    \hypo{\fst : ((A \times B) \times C) \times D \to (A \times B) \times C}
    \infer2{(\snd\circ\fst)\circ\fst : ((A \times B) \times C) \times D \to B}
    \end{prooftree}.   
\end{equation*}

On the face of it, these two are not the same construction, hence not the same
expression. 


* COMMENT Reduction relations

** One-step reduction

The big plan to fix these problems is as follows. First, we define a partial
order, $\steps$, on expressions. Roughly speaking, $e\steps f$ if $e$ and $f$
are “the same expression” and $f$ is “simpler than” $e$. It will turn out that
for every expression $e$, there is a unique, simplest expression $p$; /i.e./, an
expression such that $e\steps p$ and if $p'$ is such that $p\steps p'$ then
$p'=p$. Such a simplest expression will be called a /program/. Programs will
have all the right properties.

That's the big plan. To get there, there are three steps. We begin by defining a
relation $\termstep$ that says when one expression is “slightly simpler” than
another. Then we increase the options for $\termstep$ by allowing it to act on
any subexpression of an expression; that produces a new relation,
$\step$. Finally we take the transitive closure of $\step$ to obtain the desired
relation $\steps$.


I was going to add other equations that state, roughly, that $\top$ is the empty
product. But the typing doesn't work out. For example, one might imagine adding
$\fst\circ\unit \termstep \unit$. However, $\fst\circ\unit$ is not an expression,
because the source of the arrow type of $\fst$ must be of the form $X\times Y$,
whereas the target of $\unit$ is $\top$. Or one might think of adding
$\left\langle \unit, e \right\rangle \termstep e$. However, if $e$, the right-hand
side, has type $P\to Q$ then the left-hand side has type $(\top\times P)\to Q$.

The relations \ref{redn:abs} seem odd. Why aren't they the other way round?
Surely $\left\langle e, f\right\rangle\circ g$ is simpler than $\left\langle
e\circ g, f\circ g\right\rangle$? However, I'm pretty sure this is correct,
otherwise it would not be possible to reduce $\left\langle
\snd,\fst\right\rangle \circ\left\langle \snd,\fst\right\rangle$. With the
reductions as written, we get:
\begin{equation*}
\begin{split}
  \left\langle\snd,\fst\right\rangle \circ \left\langle \snd,\fst\right\rangle
  &\termstep
  \bigl\langle\snd \circ \left\langle\snd, \fst\right\rangle\bigr\rangle,
  \fst \circ \left\langle\snd, \fst\right\rangle \\
  &\termstep
  \left\langle\fst, \snd\right\rangle \\
  &\termstep
  \id.
\end{split}
\end{equation*}

** Example programs

*** $\top$ as unit for products

We have $\fst : A\times\top \to A$. Can we write a program $\text{\tt times1} : A \to A\times \top$? 
\begin{equation*}
\text{\tt times1} = 
  \begin{prooftree}
    \hypo{\id : A \to A}
    \hypo{\unit : A \to \top}
    \infer2{\left\langle \id, \unit\right\rangle : A \to A \times \top}
  \end{prooftree}
\end{equation*} 

Furthermore, 
\begin{equation*}
\begin{split}
  \fst \circ \text{\tt times1} &= \fst \circ \left\langle \id, \unit\right\rangle \\
  &\termstep \id,
\end{split}
\end{equation*} 
and
\begin{equation*}
\begin{split}
  \text{\tt times1} \circ \fst &= \left\langle \id, \unit\right\rangle \circ \fst \\
  &\termstep \left\langle \id \circ \fst, \unit \circ \fst \right\rangle \\
  &\termstep \left\langle \fst, \unit \right\rangle \qquad\text{(where now $\unit : A\times\top\to\top$)}\\
  &= \left\langle \fst, \snd \right\rangle \\
  &\termstep \id.
\end{split}
\end{equation*} 


*** Swap-if

Take an ~(A + B) * (C * C)~. If the first element is an ~A~, return ~id~ on ~C*C~,
otherwise return ~swap~ on ~C*C~. Type signature:
\begin{equation*}
(A + B)\times(C\times D) \to (C\times C).
\end{equation*} 

This appears to be impossible to write. Consider trying to find an expression
with an arrow type:
\begin{equation*}
(A + B)\times C \to A\times C + B\times C.
\end{equation*} 
The final expression is going to have to look something like:
\begin{equation*}
  \begin{prooftree}
    \hypo{e : \text{??} \to A \times C}
    \infer1{\inl \circ e : A \times C \to A \times C + B \times C}
    \hypo{f : \text{??} \to B \times C}
    \infer1{\inr \circ f : B \times C \to A \times C + B \times C}
    \infer2{\left\{e; f\right\} : A \times C + B \times C}
\end{prooftree}
\end{equation*} 

Whereas the start of the expression must decompose the pair:
\begin{equation*}
  \begin{prooftree}
    \hypo{\fst : (A + B) \times C \to A + B}
    \infer1{\vdots : A + B \to \text{??}}
  \end{prooftree}
\quad\text{and}\quad
 \begin{prooftree}
    \hypo{\snd : (A + B) \times C \to C}
    \infer1{\vdots : C \to \text{??}}
  \end{prooftree}
\end{equation*} 
and I just don't see how to connect these two up. The problem here is that I can't make a program
“multiply by $C$.” That is, I can't curry $\left\langle \_, \snd \right\rangle$.

Can I curry “add $C$”? 


** Notions of size

In the end, we need to show that the reduction relation $\steps$ satisfies two
properties:

1. Any sequence $e\steps f\steps\dotsb$ terminates in a finite number of
   steps (this property is called /strong normalisation/); and

2. If $e\steps f$ and $e\steps g$ then there is some $h$ such that $f\steps h$
   and $g\steps h$ (this property is called /confluence/).

We start with normalisation. The usual approach is to assign to each expression
some notion of size and to show that each application of $\termstep$ strictly
reduces this size; and that this size has a lower bound. 

Consider the following assignment of a positive integer to each expression. The
/height/ of an atomic term ($\fst$, $\snd$, $\unit$, or $\id$) is 1. The height
of an expression $(e\circ f)$ is the sum of the heights of $e$ and $f$. The
height of a pair $\left\langle e, f \right\rangle$ is the maximum of the
heights of $e$ and $f$, plus one. Intuitively, the height of an expression is
the number of arrows in the composition, except that you go the “long way round”
for pairs, rather than “both ways round.”

It's almost the case that height of an expression is strictly reduced by each
application of $\termstep$. The exceptions are \ref{redn:assoc} and
\ref{redn:abs}. Of these, \ref{redn:assoc} clearly doesn't increase the height,
it just shifts it from the “right branch” to the “left branch”. And
\ref{redn:abs} doesn't increase the height, either: it moves things “inside the
pair.”

*** Handwave

I can't make these arguments precise yet. But it's pretty clear that reductions
are “strict” (in the sense that you can never go round in a circle) and
eventually terminate. Will revisit.

** Compatible closure 

The reduction $\termstep$ acts only at “top level.” But clearly we want to
reduce any expression, even one that is a sub-part of another expression. A
/context/ is an expression “with a hole”, where another expression might go. We
can apply $\termstep$ to expressions “in context”. Thus, in reducing $e\circ f$,
we might proceed by applying $\termstep$ to $e$ (if we can). We write $e\step f$
if there is some context $C$, some subexpression $s$ of $e$ such that $e =
C[s]$, if $s\termstep t$ and $f = C[t]$. 

** Transitive closure of $\step$

Having reduced $e\step f$, we might, of course, proceed to look for, and apply,
some other reduction, and then another, and continue in this manner until either
we get stuck or we get bored. To capture this notion, we write $e\steps f$ if
there is /any/ finite sequence $e\step e'\step e''\step\dotsb f$. (Note that by
“any” we mean to include the empty sequence, so that, in particular $e\steps e$
for any $e$.)

** Confluence

It's also reasonably clear that if $e$ reduces (by $\termstep$) to $s$ one way
and $t$ another, then you can just reduce the subexpression you reduced to get
to $t$ to $s$ and the subexpression you reduced to get $s$ to $t$, and the
result will be something smaller than either $s$ or $t$. Since the reduction is
also strongly normalising, the same argument goes through for $\steps$, by doing
the one-step confluence repeatedly. 


* Footnotes

[fn:2] There is a procedure in the literature for constructing reduction
relations from equivalence classes, known as “Knuth-Bendix.” I don't understand
it, but perhaps this is related to that.

[fn:1] In the jargon, it is said that $\unit$ is instantiated “at” some other type.

 

* COMMENT OLD

The meaning of identity: 
\begin{equation*}
\begin{prooftree}[center=false]
  \hypo{\id : Q \to Q}
  \hypo{e : P \to Q}
  \infer2{\id \circ e : P \to Q}
\end{prooftree}
\;\eqln\;
\begin{prooftree}[center=false]
  \hypo{e : P \to Q}
  \hypo{\id : P \to P}
  \infer2{e \circ \id : P \to Q}
\end{prooftree}
\;\eqln\;
e : P \to Q.
\end{equation*}
Associativity:
\begin{equation*}
\begin{prooftree}[center=false]
  \hypo{e : R \to S}
  \hypo{f : Q \to R}
  \infer2{e \circ f : Q \to S}
  \hypo{g : P \to Q}
  \infer2{(e \circ f) \circ g : P \to S}
\end{prooftree}
  \;\eqln\;
\begin{prooftree}[center=false]
  \hypo{e : R \to S}
  \hypo{f : Q \to R}
  \hypo{g : P \to Q}
  \infer2{f \circ g : P \to R}
  \infer2{e \circ (f \circ g) : P \to S}.
\end{prooftree}
\end{equation*}
The meaning of pairing:
\begin{equation*}
  \begin{prooftree}[center=false]
    \hypo{\fst : X \times Y \to X}
    \hypo{e : P \to X}
    \hypo{f : P \to Y}
    \infer2{\left\langle e, f \right\rangle : P \to X \times Y}
    \infer2{\fst \circ \left\langle e, f\right\rangle : P \to X}
  \end{prooftree}
  \;\eqln\;
  e : P \to X
\end{equation*}
and
\begin{equation*}
  \begin{prooftree}[center=false]
    \hypo{\snd : X \times Y \to Y}
    \hypo{e : P \to X}
    \hypo{f : P \to Y}
    \infer2{\left\langle e, f \right\rangle : P \to X \times Y}
    \infer2{\snd \circ \left\langle e, f\right\rangle : P \to Y}
  \end{prooftree}
  \;\eqln\;
  f : P \to Y.
\end{equation*}
Uniqueness of mediating arrow in pairing (CHECK!):
\begin{equation*}
\begin{gathered}
  {\begin{prooftree}
      \hypo{\fst : X \times Y \to X}
      \hypo{e : P \to X \times Y}
      \infer2{\fst \circ e : P \to X}
      \hypo{\snd : X \times Y \to Y}
      \hypo{e : P \to X \times Y}
      \infer2{\snd \circ e : P \to Y}
      \infer2{\left\langle \fst \circ e, \snd \circ e \right\rangle : P \to X \times Y}
  \end{prooftree}} \\ 
\eqln 
  e : P \to X \times Y. 
\end{gathered}
\end{equation*}
Interaction of composition and pairing:
\begin{equation*}
  \begin{gathered}
    {\begin{prooftree}
        \hypo{e : Q \to X}
        \hypo{g : P \to Q}
        \infer2{e \circ g : P \to X}
        \hypo{f : Q \to Y}
        \hypo{g : P \to Q}
        \infer2{f \circ g : P \to Y}
        \infer2{\left\langle e\circ g, f\circ g \right\rangle : P \to X \times Y}
    \end{prooftree}} \\
 \eqln            
       {\begin{prooftree}
       \hypo{e : Q \to X}
       \hypo{f : Q \to Y}
       \infer2{\left\langle e, f \right\rangle : Q \to X \times Y}
       \hypo{g : P \to Q}
       \infer2{\left\langle e, f \right\rangle \circ g : P \to X \times Y}   
       \end{prooftree}}
  \end{gathered}
\end{equation*}

Uniqueness of $\unit$:
\begin{equation*}
  \begin{prooftree}[center=false]
    \hypo{\unit : Q \to \top}
    \hypo{e : P \to Q}
    \infer2{\unit \circ e : P \to \top} 
  \end{prooftree}
\eqln \unit : P \to \top
\end{equation*}

